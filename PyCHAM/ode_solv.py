'''solution of ODEs, generated by eqn_pars.py'''
# module to solve ordinary differential equations (ODEs)
# File Created at 2020-10-14 16:41:37.608590

import numpy as np
import scipy.sparse as SP
from assimulo.problem import Explicit_Problem
from assimulo.solvers import CVode
from assimulo.solvers import CVode
from numba import jit, f8

# define function
def ode_solv(y, integ_step, rindx, pindx, rstoi, pstoi, 
	nreac, nprod, rrc, jac_stoi, njac, jac_den_indx, 
	jac_indx, Cinfl_now, y_arr, y_rind, uni_y_rind, 
	y_pind, uni_y_pind, reac_col, prod_col, 
	rstoi_flat, pstoi_flat, rr_arr, rr_arr_p,
	rowvals, colptrs, num_comp, num_sb,
	wall_on, Psat, Cw, act_coeff, kw, jac_wall_indx,
	corei, core_diss, kelv_fac, kimt, num_asb,
	jac_part_indx,
	rindx_aq, pindx_aq, rstoi_aq, pstoi_aq,
	nreac_aq, nprod_aq, jac_stoi_aq, njac_aq, jac_den_indx_aq, jac_indx_aq,
	y_arr_aq, y_rind_aq, uni_y_rind_aq, y_pind_aq, uni_y_pind_aq,
	reac_col_aq, prod_col_aq, rstoi_flat_aq,
	pstoi_flat_aq, rr_arr_aq, rr_arr_p_aq, eqn_num):

	# inputs: -------------------------------------
	# y - initial concentrations (moleucles/cm3)
	# integ_step - the maximum integration time step (s)
	# rindx - index of reactants per equation
	# pindx - index of products per equation
	# rstoi - stoichiometry of reactants
	# pstoi - stoichiometry of products
	# nreac - number of reactants per equation
	# nprod - number of products per equation
	# rrc - reaction rate coefficient
	# jac_stoi - stoichiometries relevant to Jacobian
	# njac - number of Jacobian elements affected per equation
	# jac_den_indx - index of component denominators for Jacobian
	# jac_indx - index of Jacobian to place elements per equation (rows)
	# Cinfl_now - influx of components with constant influx 
	#		(molecules/cc/s)
	# y_arr - index for matrix used to arrange concentrations, 
	#	enabling calculation of reaction rate coefficients 
	# y_rind - index of y relating to reactants for reaction rate 
	# 	coefficient equation
	# uni_y_rind - unique index of reactants 
	# y_pind - index of y relating to products
	# uni_y_pind - unique index of products 
	# reac_col - column indices for sparse matrix of reaction losses
	# prod_col - column indices for sparse matrix of production gains
	# rstoi_flat - 1D array of reactant stoichiometries per equation
	# pstoi_flat - 1D array of product stoichiometries per equation
	# rr_arr - index for reaction rates to allow reactant loss
	# 	calculation
	# rr_arr_p - index for reaction rates to allow reactant loss
	# 	calculation
	# rowvals - row indices of Jacobian elements
	# colptrs - indices of  rowvals corresponding to each column of the
	# 	Jacobian
	# num_comp - number of components
	# num_sb - number of size bins
	# wall_on - flag saying whether to include wall partitioning
	# Psat - pure component saturation vapour pressures (molecules/cc)
	# Cw - effective absorbing mass concentration of wall (molecules/cc) 
	# act_coeff - activity coefficient of components
	# kw - mass transfer coefficient to wall (/s)
	# jac_wall_indx - index of inputs to Jacobian by wall partitioning
	# corei - index of seed material
	# core_diss - dissociation constant of seed material
	# kelv_fac - kelvin factor for particles
	# kimt - mass transfer coefficient for gas-particle partitioning (s)
	# num_asb - number of actual size bins (excluding wall)
	# jac_part_indx - index for sparse Jacobian for particle influence 
	# eqn_num - number of gas- and aqueous-phase reactions 
	# ---------------------------------------------

	# gas-particle partitioning-----------------
	# transform particle phase concentrations into
	# size bins in rows, components in columns
	ymat = (y[num_comp:num_comp*(num_asb+1)]).reshape(num_asb, num_comp)
	# total particle-phase concentration per size bin (molecules/cc (air))
	csum = ((ymat.sum(axis=1)-ymat[:, corei])+((ymat[:, corei]*core_diss))).reshape(-1, 1)
	# size bins with contents 
	isb = (csum[:, 0]>0.)
	
	# container for gas-phase concentrations at particle surface
	Csit = np.zeros((num_asb, num_comp))
	# mole fraction of components at particle surface
	Csit[isb, :] = (ymat[isb, :]/csum[isb, :])
	
	return(Csit)
